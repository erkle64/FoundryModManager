<Window x:Class="FoundryModManager2024.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:FoundryModManager2024"
        
        xmlns:resx="clr-namespace:FoundryModManager2024.Resources.Translations"
        
        mc:Ignorable="d"
        Title="Foundry Mod Manager 2024 v0.5.7"
        Height="500" Width="800"
        MinHeight="300" MinWidth="440"
        WindowStyle="None"
        Foreground="{DynamicResource NormalForeground}"
        Background="{DynamicResource NormalBackground}"
        WindowStartupLocation="CenterScreen"
        Icon="/logo.png"
        Activated="Window_Activated"
        xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2" Closing="Window_Closing">

    <Window.DataContext>
        <local:MainWindowViewModel/>
    </Window.DataContext>

    <WindowChrome.WindowChrome>
        <WindowChrome CaptionHeight="34" />
    </WindowChrome.WindowChrome>

    <Window.Resources>
        <ResourceDictionary>
            <!--Base style for title bar buttons-->
            <Style x:Key="CaptionButtonStyle" TargetType="Button">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="Button">
                            <Grid x:Name="LayoutRoot" Background="Transparent" Width="44" Height="30">
                                <TextBlock x:Name="txt" Text="{TemplateBinding Content}" FontFamily="Segoe MDL2 Assets" FontSize="10" 
                                   Foreground="{DynamicResource NormalForeground}" HorizontalAlignment="Center" VerticalAlignment="Center"
                                   RenderOptions.ClearTypeHint="Auto" TextOptions.TextRenderingMode="Aliased"  TextOptions.TextFormattingMode="Display"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter TargetName="LayoutRoot" Property="Background" Value="#E5E5E5"/>
                                    <Setter TargetName="txt" Property="Foreground" Value="#000000"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--Minimize-->
            <Style x:Key="MinimizeButtonStyle" TargetType="Button" BasedOn="{StaticResource CaptionButtonStyle}">
                <Setter Property="Content" Value="&#xE949;"/>
            </Style>

            <!--Maximize-->
            <Style x:Key="MaximizeButtonStyle" TargetType="Button" BasedOn="{StaticResource CaptionButtonStyle}">
                <Setter Property="Content" Value="&#xE739;"/>
            </Style>

            <!--Restore-->
            <Style x:Key="RestoreButtonStyle" TargetType="Button" BasedOn="{StaticResource CaptionButtonStyle}">
                <Setter Property="Content" Value="&#xE923;"/>
            </Style>

            <!--Close-->
            <Style x:Key="CloseButtonStyle" TargetType="Button" BasedOn="{StaticResource CaptionButtonStyle}">
                <Setter Property="Content" Value="&#xE106;"/>
            </Style>

            <Style TargetType="{x:Type TabItem}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabItem}">
                            <Grid>
                                <Border 
                                Name="Border"
                                Margin="0,0,-1,-2" 
                                Background="{DynamicResource NormalBackground}"
                                BorderBrush="{DynamicResource NormalForeground}" 
                                BorderThickness="1,1,1,1" 
                                CornerRadius="4,4,0,0">
                                    <ContentPresenter x:Name="ContentSite"
                                    VerticalAlignment="Center"
                                    HorizontalAlignment="Center"
                                    ContentSource="Header"
                                    Margin="12,2,12,2"
                                    RecognizesAccessKey="True"/>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Panel.ZIndex" Value="100" />
                                    <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="FocusVisual">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <Rectangle Margin="2" StrokeDashArray="1 2" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" SnapsToDevicePixels="true" StrokeThickness="1"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
            <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
            <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
            <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
            <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
            <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
            <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
            <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
            <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
            <Style TargetType="{x:Type Button}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="{DynamicResource NormalBackground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource NormalForeground}"/>
                <Setter Property="Foreground" Value="{DynamicResource NormalForeground}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="HorizontalContentAlignment" Value="Center"/>
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="Padding" Value="1"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border x:Name="border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                                <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsDefaulted" Value="true">
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource NormalForeground}"/>
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource HighlightColor}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource NormalForeground}"/>
                                </Trigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource PressedColor}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource NormalForeground}"/>
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Background" TargetName="border" Value="{DynamicResource DisabledBackground}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource DisabledForeground}"/>
                                    <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource DisabledForeground}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type ListBoxItem}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border x:Name="Bd"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Background="{TemplateBinding Background}"
                            Padding="{TemplateBinding Padding}"
                            SnapsToDevicePixels="true">
                                <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Selector.IsSelectionActive" Value="False" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource HighlightColor}" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="Selector.IsSelectionActive" Value="True" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter Property="Background" TargetName="Bd" Value="{DynamicResource HighlightColor}" />
                                </MultiTrigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{DynamicResource NormalForeground}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="AllowDrop" Value="true"/>
                <Setter Property="MinWidth" Value="0"/>
                <Setter Property="MinHeight" Value="0"/>
                <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
                <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
                <Setter Property="OverridesDefaultStyle" Value="true"/>
                <Setter Property="IsTabStop" Value="false"/>
                <Setter Property="Focusable" Value="false"/>
                <Setter Property="ClickMode" Value="Press"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <Border x:Name="templateRoot" Background="{DynamicResource NormalBackground}" BorderBrush="{DynamicResource NormalForeground}" BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="true">
                                <Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                    <Path x:Name="arrow" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z" Fill="{DynamicResource NormalForeground}" HorizontalAlignment="Center" Margin="0" VerticalAlignment="Center"/>
                                </Border>
                            </Border>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource NormalBackground}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource NormalForeground}"/>
                                    <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource NormalBackground}"/>
                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource NormalForeground}"/>
                                </MultiDataTrigger>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource HighlightColor}"/>
                                </Trigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource HighlightColor}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource NormalForeground}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource HighlightColor}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource NormalForeground}"/>
                                    <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource NormalBackground}"/>
                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource NormalForeground}"/>
                                </MultiDataTrigger>
                                <Trigger Property="IsPressed" Value="true">
                                    <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource HighlightColor}"/>
                                </Trigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource PressedColor}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource NormalForeground}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Mode=Self}}" Value="true"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource PressedColor}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource NormalForeground}"/>
                                    <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource PressedColor}"/>
                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource NormalForeground}"/>
                                </MultiDataTrigger>
                                <Trigger Property="IsEnabled" Value="false">
                                    <Setter Property="Fill" TargetName="arrow" Value="{DynamicResource NormalForeground}"/>
                                </Trigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource NormalBackground}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource NormalForeground}"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Mode=Self}}" Value="false"/>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource NormalBackground}"/>
                                    <Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource NormalForeground}"/>
                                    <Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource NormalBackground}"/>
                                    <Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource NormalForeground}"/>
                                </MultiDataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
                <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                    </Grid.ColumnDefinitions>
                    <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource Mode=TemplatedParent}}" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                        <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                            <Border x:Name="dropDownBorder" Background="{DynamicResource NormalBackground}" BorderBrush="{DynamicResource NormalForeground}" BorderThickness="1">
                                <ScrollViewer x:Name="DropDownScrollViewer">
                                    <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                            <Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </theme:SystemDropShadowChrome>
                    </Popup>
                    <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                    <Border x:Name="border" Background="{StaticResource TextBox.Static.Background}" Margin="{TemplateBinding BorderThickness}">
                        <TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="IsEnabled" Value="false">
                        <Setter Property="Opacity" TargetName="border" Value="0.56"/>
                    </Trigger>
                    <Trigger Property="IsKeyboardFocusWithin" Value="true">
                        <Setter Property="Foreground" Value="Black"/>
                    </Trigger>
                    <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                        <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                        <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                    </Trigger>
                    <Trigger Property="HasItems" Value="false">
                        <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsGrouping" Value="true"/>
                            <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                    </MultiTrigger>
                    <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                        <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                        <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
                <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                    </Grid.ColumnDefinitions>
                    <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Margin="1" Placement="Bottom" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                        <theme:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MinWidth="{Binding ActualWidth, ElementName=templateRoot}" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                            <Border x:Name="dropDownBorder" Background="{DynamicResource NormalBackground}" BorderBrush="{DynamicResource NormalForeground}" BorderThickness="1">
                                <ScrollViewer x:Name="DropDownScrollViewer">
                                    <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                        <Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                            <Rectangle x:Name="opaqueRect" Fill="{DynamicResource NormalBackground}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                        </Canvas>
                                        <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </Grid>
                                </ScrollViewer>
                            </Border>
                        </theme:SystemDropShadowChrome>
                    </Popup>
                    <ToggleButton x:Name="toggleButton" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource Mode=TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                    <ContentPresenter x:Name="contentPresenter" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" Content="{TemplateBinding SelectionBoxItem}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </Grid>
                <ControlTemplate.Triggers>
                    <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                        <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                        <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                    </Trigger>
                    <Trigger Property="HasItems" Value="false">
                        <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsGrouping" Value="true"/>
                            <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                    </MultiTrigger>
                    <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                        <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                        <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            <Style TargetType="{x:Type ComboBox}">
                <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
                <Setter Property="Background" Value="{DynamicResource NormalBackground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource NormalForeground}"/>
                <Setter Property="Foreground" Value="{DynamicResource NormalForeground}"/>
                <Setter Property="BorderThickness" Value="1"/>
                <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
                <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
                <Setter Property="Padding" Value="6,3,5,3"/>
                <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
                <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
                <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
                <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
                <Style.Triggers>
                    <Trigger Property="IsEditable" Value="true">
                        <Setter Property="IsTabStop" Value="false"/>
                        <Setter Property="Padding" Value="2"/>
                        <Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

        </ResourceDictionary>
    </Window.Resources>

    <!--Title bar button commands-->
    <Window.CommandBindings>
        <CommandBinding Command="{x:Static SystemCommands.CloseWindowCommand}" CanExecute="CommandBinding_CanExecute" Executed="CommandBinding_Executed_Close" />
        <CommandBinding Command="{x:Static SystemCommands.MaximizeWindowCommand}" CanExecute="CommandBinding_CanExecute" Executed="CommandBinding_Executed_Maximize" />
        <CommandBinding Command="{x:Static SystemCommands.MinimizeWindowCommand}" CanExecute="CommandBinding_CanExecute" Executed="CommandBinding_Executed_Minimize" />
        <CommandBinding Command="{x:Static SystemCommands.RestoreWindowCommand}" CanExecute="CommandBinding_CanExecute" Executed="CommandBinding_Executed_Restore" />
    </Window.CommandBindings>

    <Border x:Name="MainWindowBorder" BorderBrush="White" BorderThickness="0" >
        <Grid x:Name="parentContainer" Background="{DynamicResource WindowBackground}">

            <Grid.RowDefinitions>
                <RowDefinition Height ="Auto"/>
                <RowDefinition Height ="*"/>
            </Grid.RowDefinitions>

            <!--Window chrome-->
            <Grid Grid.Row="0" Height="30" Background="{DynamicResource TitleBackground}">
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Center">
                    <!--App icon-->
                    <Image Source="/logo.png" Width="18" Margin="2" HorizontalAlignment="Left" VerticalAlignment="Center" />
                    <TextBlock Text="Foundry Mod Manager 2024 v0.5.7" Margin="4 3 0 0" Foreground="{DynamicResource TitleForeground}" FontWeight="DemiBold" />
                </StackPanel>

                <!--Caption buttons-->
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" >
                    <Button Style="{StaticResource MinimizeButtonStyle}" WindowChrome.IsHitTestVisibleInChrome="True" ToolTip="Minimize"
                            Command="{x:Static SystemCommands.MinimizeWindowCommand}"/>
                    <Button x:Name="RestoreButton" Visibility="Collapsed" Style="{StaticResource RestoreButtonStyle}" 
                            Command="{x:Static SystemCommands.RestoreWindowCommand}" WindowChrome.IsHitTestVisibleInChrome="True" ToolTip="Restore"/>
                    <Button x:Name="MaximizeButton" Visibility="Visible" Style="{StaticResource MaximizeButtonStyle}" 
                            Command="{x:Static SystemCommands.MaximizeWindowCommand}" WindowChrome.IsHitTestVisibleInChrome="True" ToolTip="Maximize" />
                    <Button Style="{StaticResource CloseButtonStyle}" WindowChrome.IsHitTestVisibleInChrome="True" ToolTip="Close"
                            Command="{x:Static SystemCommands.CloseWindowCommand}"/>
                </StackPanel>
            </Grid>

            <!--App content-->
            <TabControl Grid.Row="1" x:Name="tabControl" Background="{DynamicResource NormalBackground}" Foreground="{DynamicResource NormalForeground}" BorderBrush="{DynamicResource NormalForeground}">
                <TabItem Header="Mods" Foreground="{DynamicResource NormalForeground}" IsSelected="True">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>
                        <Border Grid.Row="0" Background="{DynamicResource NormalBackground}" BorderBrush="{DynamicResource NormalForeground}" BorderThickness="0,0,0,1" />
                        <Grid Grid.Row="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" MinWidth="200"/>
                                <ColumnDefinition Width="5"/>
                                <ColumnDefinition Width="0*" MinWidth="200"/>
                            </Grid.ColumnDefinitions>
                            <ListBox Grid.Column="0" ItemsSource="{Binding Path=CurrentConfiguration.Mods}" VerticalAlignment="Stretch" Margin="0,0,0,1" Background="{DynamicResource NormalBackground}" Foreground="{DynamicResource NormalForeground}" SelectedItem="{Binding CurrentConfiguration.SelectedMod}" MouseDoubleClick="ModsListBox_MouseDoubleClick" BorderThickness="0" HorizontalContentAlignment="Stretch">
                                <ListBox.ItemTemplate>
                                    <DataTemplate>
                                        <Grid VerticalAlignment="Bottom">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <CheckBox Grid.Column="0" IsChecked="{Binding IsEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Foreground="{DynamicResource NormalForeground}" />
                                            <TextBlock Grid.Column="1" Text="{Binding Path=Mod.Name}"/>
                                            <TextBlock Grid.Column="2" Text="{x:Static resx:Translations.UpdatePendingLabel}" HorizontalAlignment="Right" TextAlignment="Right" Visibility="{Binding Path=Mod.UpdateVisibility}"/>
                                        </Grid>
                                    </DataTemplate>
                                </ListBox.ItemTemplate>
                            </ListBox>
                            <GridSplitter Grid.Column="1" Width="5" VerticalAlignment="Stretch" BorderBrush="{DynamicResource NormalForeground}" Background="{DynamicResource NormalBackground}" BorderThickness="1,0,1,0" ResizeBehavior="PreviousAndNext"/>
                            <Grid Grid.Column="2">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>
                                <ListBox Grid.Row="0" ItemsSource="{Binding Configurations, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" SelectedItem="{Binding CurrentConfiguration, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Grid.Column="1" VerticalAlignment="Stretch" Margin="0" Background="{DynamicResource NormalBackground}" Foreground="{DynamicResource NormalForeground}" BorderThickness="0">
                                    <ListBox.ItemTemplate>
                                        <DataTemplate>
                                            <StackPanel>
                                                <Label Content="{Binding Name}" Foreground="{DynamicResource NormalForeground}"/>
                                            </StackPanel>
                                        </DataTemplate>
                                    </ListBox.ItemTemplate>
                                </ListBox>
                                <Grid Grid.Row="1">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Button Grid.Column="0" Content="{x:Static resx:Translations.AddButton}" Click="AddConfigurationButton_Click" Margin="4" />
                                    <Button Grid.Column="1" Content="{x:Static resx:Translations.RemoveButton}" Click="RemoveConfigurationButton_Click" Margin="4" />
                                </Grid>
                            </Grid>
                        </Grid>
                        <Grid Grid.Row="1" Height="100">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>
                            <Border Grid.Column="0" Background="{DynamicResource NormalBackground}" BorderBrush="{DynamicResource NormalForeground}" BorderThickness="1,1,1,1" Margin="4">
                                <TextBlock Text="{Binding CurrentConfiguration.SelectedMod.Mod.Description}" Foreground="{DynamicResource NormalForeground}" Padding="4" TextWrapping="Wrap" />
                            </Border>
                            <StackPanel Grid.Column="1" Orientation="Vertical">
                                <Button Content="Mod Homepage" Click="ModHomepageButton_Click" Margin="4" Padding="2" IsEnabled="{Binding Path=CurrentConfiguration.IsAnyModSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
                                <Button Content="Mod Config File" Click="ModConfigFileButton_Click" Margin="4" Padding="2" IsEnabled="{Binding Path=CurrentConfiguration.IsAnyModSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                                <Button Content="Mod Folder" Click="ModFolderButton_Click" Margin="4" Padding="2" IsEnabled="{Binding Path=CurrentConfiguration.IsAnyModSelected, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                            </StackPanel>
                        </Grid>
                        <StackPanel Grid.Row="2" Orientation="Horizontal" HorizontalAlignment="Right">
                            <Button Content="{x:Static resx:Translations.ApplyRunSteamButton}" Click="ApplyRunSteamButton_Click" Margin="4" Padding="6" IsEnabled="{Binding Path=FoundryPathIsValid, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                            <Button Content="{x:Static resx:Translations.ApplyRun}" Click="ApplyRunButton_Click" Margin="4" Padding="6" IsEnabled="{Binding Path=FoundryPathIsValid, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                            <Button Content="{x:Static resx:Translations.ApplyButton}" Click="ApplyButton_Click" Margin="4" Padding="6" IsEnabled="{Binding Path=FoundryPathIsValid, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" />
                        </StackPanel>
                    </Grid>
                </TabItem>
                <TabItem Header="Tweaks" Foreground="{DynamicResource NormalForeground}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <Grid Grid.Row="0" Margin="8,8,8,0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0">
                                <Hyperlink NavigateUri="https://foundry.erkle64.com/" RequestNavigate="Hyperlink_RequestNavigate">foundry.erkle64.com</Hyperlink>
                            </TextBlock>
                            <Button Grid.Column="1" Content="{x:Static resx:Translations.RefreshButton}" Click="RefreshTweaksButton_Click" Padding="3" />
                        </Grid>
                        <ListBox Grid.Row="1" ItemsSource="{Binding Path=Tweaks}" SelectedValue="{Binding Path=CurrentTweak,Mode=TwoWay,UpdateSourceTrigger=PropertyChanged}" Margin="8,0,8,8" Background="{DynamicResource NormalBackground}" Foreground="{DynamicResource NormalForeground}" MouseDoubleClick="TweaksListBox_MouseDoubleClick" Grid.ColumnSpan="3">
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <StackPanel>
                                        <CheckBox Content="{Binding Path=DisplayName}" IsChecked="{Binding IsEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Foreground="{DynamicResource NormalForeground}" />
                                    </StackPanel>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                        </ListBox>
                    </Grid>
                </TabItem>
                <TabItem Header="{x:Static resx:Translations.SettingsTab}" Foreground="{DynamicResource NormalForeground}">
                    <StackPanel Orientation="Vertical">
                        <StackPanel Orientation="Horizontal" Margin="0,8,0,0">
                            <Label Content="{x:Static resx:Translations.ThemeLabel}" Foreground="{DynamicResource NormalForeground}"/>
                            <ComboBox
                                Width="200"
                                VerticalAlignment="Center"
                                SelectedValue="{Binding CurrentTheme, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                ItemsSource="{Binding Themes}"
                                DisplayMemberPath="Name"
                                IsEditable="False"
                                Background="{DynamicResource NormalBackground}"
                                Foreground="{DynamicResource NormalForeground}"/>
                        </StackPanel>
                        <Grid Margin="0,8,0,0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Label Grid.Column="0" Content="{x:Static resx:Translations.FoundryPathLabel}" Foreground="{DynamicResource NormalForeground}"/>
                            <TextBox Grid.Column="1" x:Name="FoundryPathTextBox" VerticalContentAlignment="Center" Text="{Binding FoundryPath, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Background="{DynamicResource NormalBackground}" Foreground="{DynamicResource NormalForeground}" BorderThickness="0,0,0,1" BorderBrush="{DynamicResource NormalForeground}"/>
                            <Button Grid.Column="2" Content="Browse..." Click="BrowseFoundryPathButton_Click" Margin="4,0,0,0" Width="75" HorizontalAlignment="Left"/>
                            <Button Grid.Column="3" Content="Auto" Click="AutoFoundryPathButton_Click" Margin="4,0,0,0" Width="75" HorizontalAlignment="Left"/>
                            <Button Grid.Column="4" Content="Open Folder" Click="OpenFoundryPathButton_Click" Margin="4,0,8,0" Width="75" HorizontalAlignment="Left"/>
                        </Grid>
                        <StackPanel Orientation="Horizontal" Margin="0,8,0,0">
                            <Label Content="{x:Static resx:Translations.CheckForUpdatesLabel}" Foreground="{DynamicResource NormalForeground}"/>
                            <CheckBox IsChecked="{Binding Path=CheckForUpdates, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" Foreground="{DynamicResource NormalForeground}" />
                            <Button Content="{x:Static resx:Translations.CheckNowButton}" Click="CheckForUpdatesButton_Click" Margin="16,0,0,0" Width="75"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Margin="0,8,0,0">
                            <Label Content="{x:Static resx:Translations.CacheFolderLabel}" Foreground="{DynamicResource NormalForeground}"/>
                            <Button Content="Clear" Click="ClearCacheFolderButton_Click" Margin="4,0,0,0" Width="75"/>
                            <Button Content="Open" Click="OpenCacheFolderButton_Click" Margin="4,0,8,0" Width="75"/>
                        </StackPanel>
                        <StackPanel Orientation="Horizontal" Margin="0,8,0,0">
                            <Label Content="{x:Static resx:Translations.CloseOnRunLabel}" Foreground="{DynamicResource NormalForeground}"/>
                            <CheckBox IsChecked="{Binding Path=CloseOnRun, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" VerticalAlignment="Center" Foreground="{DynamicResource NormalForeground}" />
                        </StackPanel>
                    </StackPanel>
                </TabItem>
            </TabControl>
        </Grid>
    </Border>
</Window>
